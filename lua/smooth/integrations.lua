local M = {}

function M.get()
	return {
		Normal = { fg = C.current.fg },
		NormalFloat = { fg = C.current.fg, bg = C.current.bg },
		FloatBorder = { fg = C.current.fg, bg = C.current.bg },
		ColorColumn = { fg = C.current.none, bg = C.current.darkgray },
		Conceal = { fg = C.current.darkgray },
		Cursor = { fg = C.current.fg, bg = C.current.none, reverse = true },
		CursorIM = { fg = C.current.white, bg = C.current.none, reverse = true },
		Directory = { fg = C.current.blue, bg = C.current.none },
		EndOfBuffer = { fg = C.current.darkgray },
		ErrorMsg = { fg = C.current.none },
		Folded = { fg = C.current.gray, bg = C.current.none, italic = true },
		FoldColumn = { fg = C.current.blue },
		IncSearch = { fg = C.current.white, bg = C.current.blue },
		LineNr = { fg = C.current.gray },
		CursorLineNr = { fg = C.current.fg },
		MatchParen = { fg = C.current.yellow, bg = C.current.none, bold = true },
		ModeMsg = { fg = C.current.fg },
		MoreMsg = { fg = C.current.fg },
		NonText = { fg = C.current.darkgray },
		Pmenu = { fg = C.current.fg, bg = C.current.darkgray },
		PmenuSel = { fg = C.current.fg, bg = C.current.blue },
		PmenuSbar = { fg = C.current.fg, bg = C.current.darkgray },
		PmenuThumb = { fg = C.current.fg, bg = C.current.fg },
		Question = { fg = C.current.green },
		QuickFixLine = { fg = C.current.fg, bg = C.current.none, reverse = true },
		qfLineNr = { fg = C.current.fg, bg = C.current.none, reverse = true },
		Search = { fg = C.current.white, bg = C.current.blue },
		Substitute = { fg = C.current.black, bg = C.current.magenta },
		SpecialKey = { fg = C.current.cyan },
		SpellBad = { fg = C.current.red, bg = C.current.none, italic = true },
		SpellCap = { fg = C.current.blue, bg = C.current.none, italic = true },
		SpellLocal = { fg = C.current.cyan, bg = C.current.none, italic = true },
		SpellRare = { fg = C.current.cyan, bg = C.current.none, italic = true },
		StatusLine = { fg = C.current.fg, bg = C.current.darkgray },
		StatusLineNC = { fg = C.current.fg, bg = C.current.darkgray },
		StatusLineTerm = { fg = C.current.fg, bg = C.current.darkgray },
		StatusLineTermNC = { fg = C.current.fg, bg = C.current.darkgray },
		TabLineFill = { fg = C.current.fg, bg = C.current.none },
		TablineSel = { fg = C.current.darkgray, bg = C.current.cyan },
		Tabline = { fg = C.current.fg, bg = C.current.darkgray },
		Title = { fg = C.current.green, bg = C.current.none, bold = true },
		Visual = { fg = C.current.none, bg = C.current.darkgray },
		VisualNOS = { fg = C.current.none, bg = C.current.darkgray },
		WarningMsg = { fg = C.current.yellow },
		WildMenu = { fg = C.current.magenta, bg = C.current.none, bold = true },
		CursorColumn = { fg = C.current.none, bg = C.current.darkgray },
		CursorLine = { fg = C.current.none, bg = C.current.darkgray },
		ToolbarLine = { fg = C.current.fg, bg = C.current.darkgray },
		ToolbarButton = { fg = C.current.fg, bg = C.current.none, bold = true },
		NormalMode = { fg = C.current.fg, bg = C.current.none, reverse = true },
		InsertMode = { fg = C.current.green, bg = C.current.none, reverse = true },
		ReplacelMode = { fg = C.current.red, bg = C.current.none, reverse = true },
		VisualMode = { fg = C.current.cyan, bg = C.current.none, reverse = true },
		CommandMode = { fg = C.current.fg, bg = C.current.none, reverse = true },
		Warnings = { fg = C.current.yellow },
		Comment = { fg = C.current.gray, italic = true },
		Constant = { fg = C.current.orange },
		String = { fg = C.current.green },
		Character = { fg = C.current.green },
		Number = { fg = C.current.orange },
		Boolean = { fg = C.current.orange },
		Float = { fg = C.current.orange },
		Identifier = { fg = C.current.red },
		Function = { fg = C.current.blue },
		Statement = { fg = C.current.magenta },
		Conditional = { fg = C.current.magenta },
		Repeat = { fg = C.current.magenta },
		Label = { fg = C.current.magenta },
		Operator = { fg = C.current.cyan },
		Keyword = { fg = C.current.magenta },
		Exception = { fg = C.current.magenta },
		PreProc = { fg = C.current.yellow },
		Include = { fg = C.current.blue },
		Define = { fg = C.current.magenta },
		Macro = { fg = C.current.magenta },
		PreCondit = { fg = C.current.yellow },
		Type = { fg = C.current.yellow },
		StorageClass = { fg = C.current.yellow },
		Structure = { fg = C.current.yellow },
		Typedef = { fg = C.current.yellow },
		Special = { fg = C.current.blue },
		SpecialChar = { fg = C.current.orange },
		Tag = { fg = C.current.red },
		Delimiter = { fg = C.current.fg },
		SpecialComment = { fg = C.current.gray },
		Debug = { fg = C.current.red },
		Underlined = { underline = true },
		Ignore = { fg = C.current.gray },
		Error = { fg = C.current.white, bg = C.current.red },
		Todo = { fg = C.current.yellow, bold = true },

		-- nvim-treesitter/nvim-treesitter
		["@comment"] = { link = "Comment" },
		["@error"] = { link = "Error" },
		["@none"] = { fg = C.current.fg },
		["@preproc"] = { link = "PreProc" },
		["@define"] = { link = "Define" },
		["@operator"] = { link = "Operator" },
		["@punctuation.bracket"] = { fg = C.current.fg },
		["@punctuation.delimiter"] = { fg = C.current.fg },
		["@punctuation.special"] = { fg = C.current.blue },
		["@string"] = { link = "String" },
		["@string.regex"] = { fg = C.current.orange },
		["@string.escape"] = { fg = C.current.magenta },
		["@string.special"] = { fg = C.current.blue },
		["@character"] = { link = "Character" },
		["@character.special"] = { fg = C.current.magenta },
		["@boolean"] = { link = "Boolean" },
		["@number"] = { link = "Number" },
		["@float"] = { link = "Float" },
		["@function"] = { link = "Function" },
		["@function.builtin"] = { fg = C.current.blue },
		["@function.call"] = { fg = C.current.blue },
		["@function.macro"] = { fg = C.current.magenta },
		["@method"] = { fg = C.current.blue },
		["@method.call"] = { fg = C.current.blue },
		["@constructor"] = { fg = C.current.yellow },
		["@parameter"] = { fg = C.current.red },
		["@keyword"] = { link = "Keyword" },
		["@keyword.function"] = { fg = C.current.magenta },
		["@keyword.operator"] = { fg = C.current.magenta },
		["@keyword.return"] = { fg = C.current.magenta },
		["@conditional"] = { link = "Conditional" },
		["@repeat"] = { link = "Repeat" },
		["@debug"] = { link = "Debug" },
		["@label"] = { link = "Label" },
		["@include"] = { link = "Include" },
		["@exception"] = { link = "Exception" },
		["@type"] = { link = "Type" },
		["@type.builtin"] = { fg = C.current.yellow },
		["@type.definition"] = { fg = C.current.yellow },
		["@type.qualifier"] = { fg = C.current.yellow },
		["@storageclass"] = { link = "StorageClass" },
		["@attribute"] = { fg = C.current.yellow },
		["@field"] = { fg = C.current.red },
		["@property"] = { fg = C.current.red },
		["@variable"] = { fg = C.current.red },
		["@variable.builtin"] = { fg = C.current.orange },
		["@constant"] = { link = "Constant" },
		["@constant.builtin"] = { fg = C.current.orange },
		["@constant.macro"] = { fg = C.current.orange },
		["@namespace"] = { fg = C.current.yellow },
		["@symbol"] = { fg = C.current.orange },
		["@text"] = { fg = C.current.fg },
		["@text.strong"] = { bold = true },
		["@text.emphasis"] = { italic = true },
		["@text.underline"] = { underline = true },
		["@text.strike"] = { strikethrough = true },
		["@text.title"] = { fg = C.current.yellow, bold = true },
		["@text.literal"] = { fg = C.current.green },
		["@text.uri"] = { fg = C.current.blue, underline = true },
		["@text.math"] = { fg = C.current.blue },
		["@text.reference"] = { fg = C.current.blue },
		["@text.todo"] = { link = "Todo" },
		["@text.note"] = { fg = C.current.blue, bold = true },
		["@text.warning"] = { fg = C.current.yellow, bold = true },
		["@text.danger"] = { fg = C.current.red, bold = true },
		["@tag"] = { link = "Tag" },
		["@tag.attribute"] = { fg = C.current.yellow },
		["@tag.delimiter"] = { fg = C.current.fg },

		-- neovim/nvim-lspconfig
		LspInlayHint = { bg = C.current.darkgray, fg = C.current.gray, italic = true },
		DiagnosticError = { fg = C.current.red },
		DiagnosticWarn = { fg = C.current.yellow },
		DiagnosticInfo = { fg = C.current.blue },
		DiagnosticHint = { fg = C.current.cyan },
		DiagnosticVirtualTextError = { fg = C.current.red },
		DiagnosticVirtualTextWarn = { fg = C.current.yellow },
		DiagnosticVirtualTextInfo = { fg = C.current.blue },
		DiagnosticVirtualTextHint = { fg = C.current.cyan },
		DiagnosticUnderlineError = { undercurl = true, sp = C.current.red },
		DiagnosticUnderlineWarn = { undercurl = true, sp = C.current.yellow },
		DiagnosticUnderlineInfo = { undercurl = true, sp = C.current.blue },
		DiagnosticUnderlineHint = { undercurl = true, sp = C.current.cyan },
		LspReferenceText = { bg = C.current.darkgray },
		LspReferenceRead = { bg = C.current.darkgray },
		LspReferenceWrite = { bg = C.current.darkgray },
		LspSignatureActiveParameter = { fg = C.current.yellow, bold = true },

		-- MeanderingProgrammer/render-markdown.nvim
		RenderMarkdownCode = { bg = C.current.darkgray },
		RenderMarkdownCodeInline = { bg = C.current.darkgray },
		RenderMarkdownBullet = { fg = C.current.blue },
		RenderMarkdownTableHead = { fg = C.current.blue },
		RenderMarkdownTableRow = { fg = C.current.magenta },
		RenderMarkdownSuccess = { fg = C.current.green },
		RenderMarkdownInfo = { fg = C.current.blue },
		RenderMarkdownHint = { fg = C.current.cyan },
		RenderMarkdownWarn = { fg = C.current.yellow },
		RenderMarkdownError = { fg = C.current.red },

		-- nvim-neo-tree/neo-tree.nvim
		NeoTreeDirectoryName = { fg = C.current.blue },
		NeoTreeDirectoryIcon = { fg = C.current.blue },
		NeoTreeNormal = { fg = C.current.fg, bg = C.current.bg },
		NeoTreeNormalNC = { fg = C.current.fg, bg = C.current.bg },
		NeoTreeExpander = { fg = C.current.gray },
		NeoTreeIndentMarker = { fg = C.current.gray },
		NeoTreeRootName = { fg = C.current.blue, bold = true },
		NeoTreeSymbolicLinkTarget = { fg = C.current.magenta },
		NeoTreeModified = { fg = C.current.orange },
		NeoTreeGitAdded = { fg = C.current.green },
		NeoTreeGitConflict = { fg = C.current.red },
		NeoTreeGitDeleted = { fg = C.current.red },
		NeoTreeGitIgnored = { fg = C.current.gray },
		NeoTreeGitModified = { fg = C.current.yellow },
		NeoTreeGitUnstaged = { fg = C.current.red },
		NeoTreeGitUntracked = { fg = C.current.magenta },
		NeoTreeGitStaged = { fg = C.current.green },
		NeoTreeFloatBorder = { link = "FloatBorder" },
		NeoTreeFloatTitle = { link = "FloatTitle" },
		NeoTreeTitleBar = { fg = C.current.bg, bg = C.current.blue },
		NeoTreeFileNameOpened = { fg = C.current.magenta },
		NeoTreeDimText = { fg = C.current.gray },
		NeoTreeFilterTerm = { fg = C.current.green, bold = true },
		NeoTreeTabActive = { bg = C.current.bg, fg = C.current.blue, bold = true },
		NeoTreeTabInactive = { bg = C.current.darkgray, fg = C.current.gray },
		NeoTreeTabSeparatorActive = { fg = C.current.bg, bg = C.current.bg },
		NeoTreeTabSeparatorInactive = { fg = C.current.darkgray, bg = C.current.darkgray },
		NeoTreeVertSplit = { fg = C.current.darkgray, bg = C.current.darkgray },
		NeoTreeWinSeparator = {
			fg = C.current.darkgray,
			bg = C.current.darkgray,
		},
		NeoTreeStatusLineNC = { fg = C.current.bg, bg = C.current.bg },

		-- folke/snacks.nvim
		SnacksPickerPathIgnored = { fg = C.current.gray },
		SnacksPickerPathHidden = { fg = C.current.gray },
	}
end

return M
